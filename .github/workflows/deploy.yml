name: Build & Deploy (rclone)

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - run: npm ci
      - run: npm run build

      - name: Install rclone
        run: curl https://rclone.org/install.sh | sudo bash

      - name: Sync project to FTP server
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          set -euo pipefail

          rclone config create site ftp \
            host "${FTP_SERVER}" \
            user "${FTP_USERNAME}" \
            pass "${FTP_PASSWORD}" \
            port 21 \
            tls false

          rclone sync ./ site:/ \
            --transfers 2 \
            --checkers 2 \
            --ftp-concurrency 2 \
            --exclude "/.git/**" \
            --exclude "/.github/**" \
            --exclude "/node_modules/**" \
            --exclude "/tests/**" \
            --exclude "/README.md" \
            --exclude "/package-lock.json" \
            --exclude "/package.json" \
            --exclude "/deploy-test*.txt" \
            --exclude "/vite.config.js" \
            --exclude "/vitest.config.js" \
            --exclude "/.gitignore" \
            --exclude "/src/**" \
            --exclude "/ART RATIO APP.code-workspace" \
            --exclude "/eqouipment list for app.xlsx" \
            --exclude "/main" \
            --exclude "/public/**" \
            --exclude "/deploy-test-latest.txt"

      - name: Create backend config from secret
        env:
          BACKEND_CONFIG_PHP: ${{ secrets.BACKEND_CONFIG_PHP }}
        run: |
          set -euo pipefail
          if [ -z "${BACKEND_CONFIG_PHP:-}" ]; then
            echo "BACKEND_CONFIG_PHP secret is empty."
            exit 1
          fi
          mkdir -p backend
          printf '%s' "${BACKEND_CONFIG_PHP}" | base64 --decode > backend/config.php

      - name: Upload backend config via FTPS
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT }}
          FTP_SKIP_TLS_VERIFY: ${{ secrets.FTP_SKIP_TLS_VERIFY }}
        run: |
          set -euo pipefail
          FTP_PORT=${FTP_PORT:-21}
          curl_args=(
            --fail --show-error --silent
            --ftp-create-dirs --ftp-method nocwd --ftp-pasv
            --ftp-ssl --ssl-reqd
            --user "${FTP_USERNAME}:${FTP_PASSWORD}"
            -T backend/config.php
            "ftp://${FTP_SERVER}:${FTP_PORT}/backend/config.php"
          )

          if [[ "${FTP_SKIP_TLS_VERIFY:-false}" == "true" ]]; then
            curl_args+=(--insecure)
          fi

          curl "${curl_args[@]}"
